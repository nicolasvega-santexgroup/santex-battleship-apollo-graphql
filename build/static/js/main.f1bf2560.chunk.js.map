{"version":3,"sources":["utils/Logger.js","lib/environment/index.js","graphql/ApolloClient.js","redux/reducers/index.js","redux/store.js","Routes.component.jsx","components/root/Root.component.jsx","components/header/Header.component.jsx","helpers/formatters/commons.js","components/current_games/TableRow.component.jsx","components/current_games/CurrentGames.component.jsx","components/games_pool/TableRow.component.jsx","components/games_pool/GamesPool.component.jsx","components/home/Home.component.jsx","constants/cell.constants.js","constants/game.constants.js","components/cell/Cell.component.jsx","components/board/Board.component.jsx","components/surrender_modal/SurrenderModal.component.jsx","components/game/Game.container.jsx","helpers/game/ships.js","App.js","serviceWorker.js","index.js","components/header/Header.module.scss","components/home/Home.module.scss"],"names":["utils_Logger","log","_console","console","apply","arguments","error","_console2","Environment","initialize","request","XMLHttpRequest","open","send","status","setEnvironmentVariables","responseText","hasEnvironmentVariables","envVars","sessionStorage","getItem","JSON","parse","env","setItem","get","key","Logger","client","ApolloClient","uri","concat","rootReducer","combineReducers","loggerMiddleware","createLogger","store","createStore","applyMiddleware","thunkMiddleware","Routes","react_default","a","createElement","Route","exact","path","component","Home","Game","Root","Container","fluid","className","Header_component","Routes_component","Header","classes","header","Link","to","header_logo","header_options","header_buttons","header_button","formatDate","isoDate","_ref","length","undefined","_ref$setTime","setTime","_ref$useLocalTime","useLocalTime","_ref$useSeconds","useSeconds","FORMAT","dateTime","moment","utc","local","format","formatDateToISO","date","isMoment","TableRow","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggle","setState","dropdownOpen","state","_this$props","index","createdAt","timePlayed","currentTurn","player","ButtonDropdown","isOpen","DropdownToggle","caret","size","DropdownMenu","DropdownItem","disabled","Component","DUMMY_DATA","id","CurrentGames","gamesAvailable","getRows","map","gameData","TableRow_component","assign","react","Table","striped","bordered","hover","dark","name","Button","color","onClick","GamesPool","games_pool_TableRow_component","home","Row","Col","xs","offset","Function","prototype","GamesPool_component","CurrentGames_component","cellStatus","shipStatus","ships","Cell","clickCell","bind","assertThisInitialized","x","y","_this2","position","cellClassName","classNames","unchecked","miss","hitted","type","Board","matrix","row","rowIndex","column","columnIndex","Cell_component","defaultProps","SurrenderModal","toggleModal","prevState","modalOpen","onClickHandler","renderModal","Modal","backdrop","ModalHeader","ModalBody","ModalFooter","MOCK_GAME_MATRIX","newStatus","surrenderGame","gameShips","Promise","resolve","maxX","maxY","newMatrix","slice","forEach","ship","i","Math","floor","random","initialX","initialY","overlap","then","Board_component","SurrenderModal_component","App","react_apollo_browser_umd","es","BrowserRouter","Root_component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","home_logo","home_button"],"mappings":"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","file":"static/js/main.f1bf2560.chunk.js","sourcesContent":["/* eslint-disable no-console */\r\nclass Logger {\r\n  log = (...rest) => {\r\n    console.log(...rest);\r\n    return true;\r\n  };\r\n\r\n  error = (...rest) => {\r\n    console.error(...rest);\r\n    return true;\r\n  };\r\n}\r\n\r\nexport default new Logger();\r\n","import Logger from '../../utils/Logger';\r\n\r\nclass Environment {\r\n  static initialize = () => {\r\n    const request = new XMLHttpRequest();\r\n    request.open('GET', '/assets/config.json', false);\r\n    request.send(null);\r\n    if (request.status === 200) {\r\n      Environment.setEnvironmentVariables(request.responseText);\r\n    }\r\n  };\r\n\r\n  static hasEnvironmentVariables = () => {\r\n    const envVars = sessionStorage.getItem('BATTLESHIP');\r\n    return JSON.parse(envVars);\r\n  };\r\n\r\n  static setEnvironmentVariables = env => {\r\n    sessionStorage.setItem('BATTLESHIP', env);\r\n  };\r\n\r\n  static get = key => {\r\n    try {\r\n      return JSON.parse(sessionStorage.getItem('BATTLESHIP'))[key];\r\n    } catch (error) {\r\n      Logger.log('Unable to retreive environment variable: ', key);\r\n    }\r\n  };\r\n}\r\n\r\nEnvironment.initialize();\r\n\r\nexport default Environment;\r\n","// Package dependencies\r\nimport ApolloClient from 'apollo-boost';\r\n\r\n// Local dependencies\r\nimport Environment from '../lib/environment';\r\n\r\n\r\n// Pass your GraphQL endpoint to uri\r\nexport const client = new ApolloClient({ uri: `${Environment.get('API_GATEWAY')}/graphql` });\r\n","import { combineReducers } from 'redux';\r\n\r\n\r\nconst rootReducer = combineReducers({});\r\n\r\n\r\nexport default rootReducer;\r\n","import { createStore, applyMiddleware } from 'redux';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport { createLogger } from 'redux-logger';\r\nimport rootReducer from './reducers';\r\n\r\nconst loggerMiddleware = createLogger();\r\n\r\nexport const store = createStore(\r\n  rootReducer,\r\n  applyMiddleware(\r\n    thunkMiddleware,\r\n    loggerMiddleware,\r\n  ),\r\n);\r\n","// Package dependencies\r\nimport React from 'react';\r\nimport { Route } from 'react-router-dom';\r\n\r\n// Local dependencies\r\nimport { Home } from './components';\r\nimport { Game } from './components';\r\n\r\n\r\nconst Routes = () => (\r\n  <div>\r\n    <Route exact key=\"home\" path=\"/\" component={Home} />\r\n    <Route exact key=\"game\" path=\"/game/:id\" component={Game} />\r\n  </div>\r\n);\r\n\r\nexport default Routes;\r\n","// Package dependencies\r\nimport React from 'react';\r\nimport { Container } from 'reactstrap';\r\n\r\n// Local dependencies\r\nimport Routes from '../../Routes.component';\r\nimport { Header } from '../index';\r\n\r\n// Styles\r\nimport './Root.scss';\r\n\r\n\r\nconst Root = () => (\r\n  <Container fluid className=\"root-wrapper\">\r\n    <Header />\r\n    <div className=\"content\">\r\n      <Routes />\r\n    </div>\r\n  </Container>\r\n);\r\n\r\nexport default Root;\r\n","// Package dependencies\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\n// Styles\r\nimport classes from './Header.module.scss';\r\n\r\nconst Header = () => (\r\n  <div className={classes.header}>\r\n    <Link to=\"/\" className={classes.header_logo}>\r\n      Home\r\n    </Link>\r\n    <div className={classes.header_options}>\r\n      <ul className={classes.header_buttons}>\r\n        <li>\r\n          <Link to=\"/stats\" className={classes.header_button}>\r\n            Stats\r\n          </Link>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default Header;\r\n","// Package dependencies\r\nimport moment from 'moment';\r\n\r\n\r\nexport const ISO8601_FORMAT_WITH_MILLISECONDS = 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]';\r\n\r\n\r\n/**\r\n * Return a formatted date or datetime.\r\n * @param isoDate - ISO date.\r\n * @param setTime - Flag to set the time (12hs based) to the response.\r\n * @param useLocalTime - Flag to use local timezone (default: false).\r\n * @param useSeconds - Whether to use seconds on the format (default: false).\r\n * @returns {string}\r\n */\r\nexport const formatDate = (isoDate, {setTime = false, useLocalTime = false, useSeconds = false} = {}) => {\r\n  const FORMAT = `MM/DD/YYYY${setTime ? ` - hh:mm${useSeconds ? ':ss' : ''} a` : ''}`;\r\n\r\n  let dateTime = useLocalTime ? moment.utc(isoDate).local() : moment.utc(isoDate);\r\n\r\n  return isoDate ? dateTime.format(FORMAT) : '';\r\n};\r\n\r\n/**\r\n * Return a formatted datetime.\r\n * @param isoDate - ISO date.\r\n * @param options - Options to be passed to formatDate.\r\n * @returns {string}\r\n */\r\nexport const formatDatetime = (isoDate, options = {}) => {\r\n  return formatDate(isoDate, {\r\n    // Use local time by default\r\n    useLocalTime: true,\r\n    ...options,\r\n    // Always set the time\r\n    setTime: true,\r\n  });\r\n};\r\n\r\n/**\r\n * Format a date to ISO string.\r\n * @param date\r\n * @returns {*}\r\n */\r\nexport const formatDateToISO = date => {\r\n  if (!date || !moment.isMoment(date)) {\r\n    return null;\r\n  }\r\n\r\n  // Ignore timezone\r\n  return date.format(ISO8601_FORMAT_WITH_MILLISECONDS);\r\n};\r\n\r\n\r\nexport const dateFromDateTime = datetime => datetime ? moment.utc(datetime) : undefined;\r\n","// Package dependencies\r\nimport React, { Component } from 'react';\r\nimport { ButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\r\n\r\n// Local dependencies\r\nimport { formatDate } from '../../helpers/formatters/commons';\r\n\r\n\r\nclass TableRow extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      dropdownOpen: false\r\n    };\r\n  }\r\n\r\n  toggle = () => {\r\n    this.setState({\r\n      dropdownOpen: !this.state.dropdownOpen\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const {index, createdAt, timePlayed, currentTurn} = this.props;\r\n\r\n    return (\r\n      <tr>\r\n        <td>{index}</td>\r\n        <td>{formatDate(createdAt)}</td>\r\n        <td>{timePlayed}</td>\r\n        <td>{currentTurn.player}</td>\r\n        <td>\r\n          <ButtonDropdown isOpen={this.state.dropdownOpen} toggle={this.toggle}>\r\n            <DropdownToggle caret size=\"sm\">\r\n              Actions\r\n            </DropdownToggle>\r\n            <DropdownMenu>\r\n              <DropdownItem header>See board</DropdownItem>\r\n              <DropdownItem disabled>Play</DropdownItem>\r\n            </DropdownMenu>\r\n          </ButtonDropdown>\r\n        </td>\r\n      </tr>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default TableRow;\r\n","// Package dependencies\r\nimport React, { Component, Fragment } from 'react';\r\nimport { compose, graphql, withApollo } from 'react-apollo';\r\nimport moment from 'moment';\r\nimport { Table } from 'reactstrap';\r\n\r\n// Local dependencies\r\nimport { formatDateToISO } from '../../helpers/formatters/commons';\r\nimport TableRow from './TableRow.component';\r\n// import { FetchMyGames } from '../../graphql/queries/Game';\r\n\r\n\r\n// TODO: Replace this mock with data fetched from the backend\r\nconst DUMMY_DATA = [\r\n  {createdAt: formatDateToISO(moment()), timePlayed: 0, currentTurn: {id: 1, player: 'John Doe'}},\r\n];\r\n\r\nclass CurrentGames extends Component {\r\n  state = {gamesAvailable: []};\r\n\r\n  getRows = () => {\r\n    return DUMMY_DATA.map((gameData, index) => <TableRow index={index} {...gameData} />);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        <h3>My current games</h3>\r\n        <Table striped bordered hover dark>\r\n          <thead>\r\n          <tr>\r\n            <th>#</th>\r\n            <th>Created At</th>\r\n            <th>Time Played</th>\r\n            <th>Turn</th>\r\n            <th />\r\n          </tr>\r\n          </thead>\r\n          <tbody>\r\n          {this.getRows()}\r\n          </tbody>\r\n        </Table>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n// export default compose(\r\n//   withApollo,\r\n//   graphql(FetchMyGames),\r\n// )(CurrentGames);\r\n\r\nexport default CurrentGames;\r\n","// Package dependencies\r\nimport React, { Component } from 'react';\r\nimport { Button } from 'reactstrap';\r\n\r\n// Local dependencies\r\nimport { formatDate } from '../../helpers/formatters/commons';\r\n\r\n\r\nclass TableRow extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      dropdownOpen: false\r\n    };\r\n  }\r\n\r\n  toggle = () => {\r\n    this.setState({\r\n      dropdownOpen: !this.state.dropdownOpen\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const {index, createdAt, player} = this.props;\r\n\r\n    return (\r\n      <tr>\r\n        <td>{index}</td>\r\n        <td>{formatDate(createdAt)}</td>\r\n        <td>{player.name}</td>\r\n        <td>\r\n          <Button color=\"info\" onClick={this.props.onClick}>Play</Button>\r\n        </td>\r\n      </tr>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default TableRow;\r\n","// Package dependencies\r\nimport React, { Component, Fragment } from 'react';\r\nimport moment from 'moment';\r\nimport { Table } from 'reactstrap';\r\n\r\n// Local dependencies\r\nimport { formatDateToISO } from '../../helpers/formatters/commons';\r\nimport TableRow from './TableRow.component';\r\n\r\n\r\n// TODO: Replace this mock with data fetched from the backend\r\nconst DUMMY_DATA = [\r\n  {createdAt: formatDateToISO(moment()), player: {id: 2, name: 'Donald Trump'}},\r\n];\r\n\r\nclass GamesPool extends Component {\r\n  state = {gamesAvailable: []};\r\n\r\n  getRows = () => {\r\n    return DUMMY_DATA.map((gameData, index) => <TableRow index={index} {...gameData} />);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        <h3>Games Pool</h3>\r\n        <Table striped bordered hover dark>\r\n          <thead>\r\n            <tr>\r\n              <th>#</th>\r\n              <th>Created At</th>\r\n              <th>Player</th>\r\n              <th />\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {this.getRows()}\r\n          </tbody>\r\n        </Table>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GamesPool;\r\n","// Package dependencies\r\nimport React from 'react';\r\nimport { Col, Row, Button } from 'reactstrap';\r\n\r\n// Local dependencies\r\nimport CurrentGames from '../current_games/CurrentGames.component';\r\nimport GamesPool from '../games_pool/GamesPool.component';\r\n\r\n// Styles\r\nimport classes from './Home.module.scss';\r\n\r\nconst TITLE = 'Battleship';\r\n\r\nconst Home = () => (\r\n  <div className={classes.home}>\r\n    <Row>\r\n      <Col xs={{size: 12}}>\r\n        <div className=\"title\">\r\n          <h1>{TITLE}</h1>\r\n        </div>\r\n      </Col>\r\n      <Col xs={{size: 4, offset: 8}} className=\"text-right\">\r\n        <Button color=\"info\" onClick={Function.prototype}>New Game</Button>\r\n      </Col>\r\n    </Row>\r\n    <Row>\r\n      <Col xs=\"6\">\r\n        <GamesPool />\r\n      </Col>\r\n      <Col xs=\"6\">\r\n        <CurrentGames />\r\n      </Col>\r\n    </Row>\r\n  </div>\r\n);\r\n\r\nexport default Home;\r\n","export const cellStatus = {\r\n  HITTED: -2,\r\n  MISS: -1,\r\n  WATER: 0,\r\n};\r\n\r\nexport const maxPositions = {\r\n  X: 9,\r\n  Y: 9,\r\n};\r\n","export const gameActionTypes = {\r\n  CELL_SELECTED: 'CELL_SELECTED',\r\n  NEW_GAME: 'NEW_GAME',\r\n  REQUEST_SHIPS_MATRIX: 'REQUEST_SHIPS_MATRIX',\r\n  RECEIVE_SHIPS_MATRIX: 'RECEIVE_SHIPS_MATRIX',\r\n};\r\n\r\nexport const gameStatus = {\r\n  WON: 'Won',\r\n  LOST: 'Lost',\r\n};\r\n\r\nexport const defaultGameMatrix = [\r\n  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n];\r\n\r\n\r\nexport const shipStatus = {\r\n  AFLOAT: 'Afloat',\r\n  SUNKEN: 'Sunken',\r\n};\r\n\r\nexport const ships = [\r\n  {\r\n    id: 1,\r\n    size: 4,\r\n    status: shipStatus.AFLOAT,\r\n  },\r\n  {\r\n    id: 2,\r\n    size: 3,\r\n    status: shipStatus.AFLOAT,\r\n  },\r\n  {\r\n    id: 3,\r\n    size: 3,\r\n    status: shipStatus.AFLOAT,\r\n  },\r\n  {\r\n    id: 4,\r\n    size: 2,\r\n    status: shipStatus.AFLOAT,\r\n  },\r\n  {\r\n    id: 5,\r\n    size: 2,\r\n    status: shipStatus.AFLOAT,\r\n  },\r\n  {\r\n    id: 6,\r\n    size: 2,\r\n    status: shipStatus.AFLOAT,\r\n  },\r\n  {\r\n    id: 7,\r\n    size: 1,\r\n    status: shipStatus.AFLOAT,\r\n  },\r\n  {\r\n    id: 8,\r\n    size: 1,\r\n    status: shipStatus.AFLOAT,\r\n  },\r\n  {\r\n    id: 9,\r\n    size: 1,\r\n    status: shipStatus.AFLOAT,\r\n  },\r\n  {\r\n    id: 10,\r\n    size: 1,\r\n    status: shipStatus.AFLOAT,\r\n  },\r\n];\r\n","// Package dependencies\r\nimport React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\n\r\n// Local dependencies\r\nimport { cellStatus } from '../../constants';\r\n\r\n// Styles\r\nimport './Cell.sass';\r\n\r\n\r\nclass Cell extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {};\r\n\r\n    this.clickCell = this.clickCell.bind(this);\r\n  }\r\n\r\n  clickCell(x, y, status) {\r\n    const { onClick } = this.props;\r\n\r\n    if (status !== cellStatus.MISS && status !== cellStatus.HITTED) {\r\n      if (status === cellStatus.WATER) {\r\n        onClick(x, y, cellStatus.MISS);\r\n      } else if (status > cellStatus.WATER) {\r\n        onClick(x, y, cellStatus.HITTED);\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      position,\r\n      status,\r\n    } = this.props;\r\n\r\n    const cellClassName = classNames(\r\n      'cell',\r\n      {\r\n        unchecked: status >= cellStatus.WATER,\r\n        miss: status === cellStatus.MISS,\r\n        hitted: status === cellStatus.HITTED,\r\n      },\r\n    );\r\n\r\n    return (\r\n      <button onClick={() => this.clickCell(position.x, position.y, status)} className={cellClassName} type=\"button\" />\r\n    );\r\n  }\r\n}\r\n\r\nCell.propTypes = {\r\n  position: PropTypes.shape({\r\n    x: PropTypes.number.isRequired,\r\n    y: PropTypes.number.isRequired,\r\n  }).isRequired,\r\n  status: PropTypes.number.isRequired,\r\n  onClick: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Cell;\r\n","// Package dependencies\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n// Local dependencies\r\nimport Cell from '../cell/Cell.component';\r\n\r\n// Styles\r\nimport './Board.sass';\r\n\r\nconst Board = (props) => {\r\n  const { matrix, onClick } = props;\r\n\r\n  return (\r\n    <div className=\"board\">\r\n      <div className=\"board_elements\">\r\n        {matrix.map((row, rowIndex) => (\r\n          row.map((column, columnIndex) => (\r\n            <div className=\"board_element\" key={`element_${rowIndex}_${columnIndex}`}>\r\n              <Cell\r\n                position={{ x: rowIndex, y: columnIndex }}\r\n                status={matrix[rowIndex][columnIndex]}\r\n                onClick={onClick}\r\n              />\r\n            </div>\r\n          ))\r\n        ))\r\n        }\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nBoard.propTypes = {\r\n  matrix: PropTypes.instanceOf(Array),\r\n  onClick: PropTypes.func.isRequired,\r\n};\r\n\r\nBoard.defaultProps = {\r\n  matrix: [],\r\n};\r\n\r\nexport default Board;\r\n","// Package dependencies\r\nimport React, { Component, Fragment } from 'react';\r\nimport { Modal, ModalHeader, ModalBody, ModalFooter, Button } from 'reactstrap';\r\n\r\n\r\nclass SurrenderModal extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {modalOpen: props.isOpen || false};\r\n  }\r\n\r\n  toggleModal = () => this.setState(prevState => ({modalOpen: !prevState.modalOpen}));\r\n\r\n  onClickHandler = () => {\r\n    const { onClick } = this.props;\r\n\r\n    onClick && onClick();\r\n    // Close modal\r\n    this.toggleModal();\r\n  };\r\n\r\n  renderModal = () => {\r\n    return (\r\n      <Modal isOpen={this.state.modalOpen} toggle={this.toggleModal} backdrop={false}>\r\n        <ModalHeader toggle={this.toggleModal}>Surrender</ModalHeader>\r\n        <ModalBody>\r\n          Are you sure you want to surrender ?\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          <Button color=\"primary\" onClick={this.onClickHandler}>Surrender</Button>{' '}\r\n        </ModalFooter>\r\n      </Modal>\r\n    );\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        {this.renderModal()}\r\n        <Button color=\"warning\" onClick={this.toggleModal}>Surrender</Button>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default SurrenderModal;\r\n","// Package dependencies\r\nimport React, { Component } from 'react';\r\nimport { Row, Col } from 'reactstrap';\r\n\r\n// Local dependencies\r\nimport { putShipsOnCells } from '../../helpers/game/ships';\r\nimport { ships as gameShips, } from '../../constants';\r\nimport Board from '../board/Board.component';\r\nimport SurrenderModal from '../surrender_modal/SurrenderModal.component';\r\n\r\n\r\nconst MOCK_GAME_MATRIX = [\r\n  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n];\r\n\r\n\r\nclass Game extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {matrix: MOCK_GAME_MATRIX};\r\n  }\r\n\r\n  componentDidMount() {\r\n    // TODO: Make a query to get the game's current status\r\n    putShipsOnCells(this.state.matrix, gameShips)\r\n      .then(newMatrix => {\r\n        this.setState({matrix: newMatrix});\r\n      });\r\n  }\r\n\r\n  onClick = (x, y, newStatus) => {\r\n    // TODO: Make a mutation to modify Game's current status based on the current action\r\n    console.log('$ x, y, newStatus', x, y, newStatus); // eslint-disable-line\r\n  };\r\n\r\n  surrenderGame = () => {\r\n    // TODO: Make a mutation to modify Game's current status based on the current action\r\n    console.log('$ Player surrenders !'); // eslint-disable-line\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Row className=\"game\">\r\n        <Col xs={{ size: 8, offset: 2 }}>\r\n          <Board\r\n            matrix={this.state.matrix}\r\n            onClick={this.onClick}\r\n          />\r\n        </Col>\r\n        <Col xs={{ size: 8, offset: 2 }} className=\"mt-3 text-center\">\r\n          <SurrenderModal onClick={this.surrenderGame} />\r\n        </Col>\r\n      </Row>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default Game;\r\n","import { cellStatus } from '../../constants';\r\n\r\nexport const putShipsOnCells = (matrix, ships) => (\r\n  new Promise((resolve) => {\r\n    const maxX = matrix.length - 1;\r\n    const maxY = matrix[0].length - 1;\r\n    const newMatrix = matrix.map(row => row.slice());\r\n\r\n    ships.forEach((ship) => {\r\n      const position = Math.floor(Math.random() * 2); // 0 -> horizontal. 1 -> vertical.\r\n      let initialX = 0;\r\n      let initialY = 0;\r\n      let overlap = false;\r\n\r\n      do {\r\n        overlap = false;\r\n        initialX = Math.floor(Math.random() * maxX);\r\n        initialY = Math.floor(Math.random() * maxY);\r\n\r\n        if (position) { // vertical check.\r\n          let i;\r\n          for (i = 0; i < ship.size; i += 1) {\r\n            if ((initialY + i > maxY) || (newMatrix[initialX][initialY + i] > cellStatus.WATER)) {\r\n              overlap = true;\r\n            }\r\n          }\r\n        } else { // horizontal check.\r\n          let i;\r\n          for (i = 0; i < ship.size; i += 1) {\r\n            if ((initialX + i > maxX) || (newMatrix[initialX + i][initialY] > cellStatus.WATER)) {\r\n              overlap = true;\r\n            }\r\n          }\r\n        }\r\n      }\r\n      while (overlap);\r\n\r\n      if (position) { // vertical place.\r\n        let i;\r\n        for (i = 0; i < ship.size; i += 1) {\r\n          newMatrix[initialX][initialY + i] = ship.id;\r\n        }\r\n      } else { // horizontal place.\r\n        let i;\r\n        for (i = 0; i < ship.size; i += 1) {\r\n          newMatrix[initialX + i][initialY] = ship.id;\r\n        }\r\n      }\r\n    });\r\n\r\n    resolve(newMatrix);\r\n  })\r\n);\r\n","// Package dependencies\r\nimport React, { Component } from 'react';\r\nimport { ApolloProvider } from 'react-apollo';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport { Provider } from 'react-redux';\r\n\r\n// Local dependencies\r\nimport { client } from './graphql/ApolloClient';\r\nimport { store } from './redux/store';\r\nimport { Root } from './components';\r\n\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <ApolloProvider client={client}>\r\n        <Provider store={store}>\r\n          <BrowserRouter>\r\n            <Root />\r\n          </BrowserRouter>\r\n        </Provider>\r\n      </ApolloProvider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","// Package dependencies\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\n// Local dependencies\r\nimport App from './App';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n// Styles\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3zJpq\",\"header_logo\":\"Header_header_logo__2hk-e\",\"header_options\":\"Header_header_options__2IofG\",\"header_buttons\":\"Header_header_buttons__2wtiv\",\"header_button\":\"Header_header_button__O1mqN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"home\":\"Home_home__uiBMO\",\"home_logo\":\"Home_home_logo__zjXEc\",\"home_button\":\"Home_home_button__1x9X8\"};"],"sourceRoot":""}